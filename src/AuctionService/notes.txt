>choose webapi template
>remove swagger
>make entities - template class- get set
>entity/class name will be the tables and the properties are the columns
>make connections by putting other class properties
>follow conventions, Id, <entityName>Id
>install Microsoft.EntityFrameworkCore.Design , Npgsql.EntityFrameworkCore.PostgreSQL, automapper
>make DbContext
>add dbcontext service to program.cs 
>Configure  "DefaultConnection":"Server=localhost:5432;User Id=postgres;Password=postgrespw;Database=auction"
>run //dotnet ef migrations add "InitialCreate" -o Data/Migrations to make migrations
>Migrations = class to db
>make dockercomposeyml
> go to cd Carsties then => docker compose up -d
> go to AUctionService then => dotnet ef database update
>now db is created, make a db initializer
>try it in the program cs in try catch block
>dotnet run to put the initializer 
> make dtos
>use automapper to map entities to dto
>make the controller
>inject dbcontext and mapper in controller
>make crud controller
>
===for outbox ====
>make sure to modify masstransit service in program cs
>make migrations after the outbox is added to dbcontext|||dotnet ef migrations add Outbox ==> in the service root directory
>modify the controller for outbox
>MassTransit only publishes events from the Outbox AFTER the transaction commits.


===for auth api====
>install microsoft.aspnetcore.authentication.jwtbearer to the resource server
>add the service for authentication
>add the authentication as middleware
>add the IdentityServiceUrl in appsettings
>add [Authorize] in protected endpoints like put delete post
>access claims from json through User.Identity.Name 

