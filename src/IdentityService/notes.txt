>replace the sqlite in csproj to postgres package
>replace the https is launchsettings to http
>replace the defaultstring in appsettings to "DefaultConnection": "Server=localhost;Port=5432;Username=postgres;Password=postgrespw;Database=identity"
>replace sqlite in hostingextension to UseNpgsql
>put SameSite = SameSiteMode.Lax; to prevent login issue in hostingextension
>remove the if else seeding in seeddata and just put SeedData.EnsureSeedData(app);
>in seeddata cs click the using and click the lightbulb
>go to identity directory in terminal and dotnet ef migrations add "InitialCreate" -o Data/Migrations
>make a register page, copy the namespace and model from login
>make sure to use allowanonymous attribute in register to allow anyone to access the register page
>make a registerviewmodel as a model for the values given by the users and put required attribute
>use bindproperty to bind frontend props to the viewmodel
>make a get endpoint that will assign the returnurl and return the register page
>make a post that will receive the form items and register the user based on the credentials given

===issuing token to client using password grant====
>go to config 
>rename apiscope and put description
>remove the sample clients : m2m, etc
>make a sample postman client
>request token in postman in xxx urlencoded
>include the fields needed like username password etc.
>request for access token
>the initial jwt dont include the claims so u need to add it
>make a customprofile in services directory to add additional details in jwt
>inject usermanager to get the user details and existing claims
>make your own claims
>add the claims you made and the existing claims in identity server
>put the AddProfileService<CustomProfileService>(); in hostingextensions

====AFter identity server is finished, set auth in apis====
install microsoft.aspnetcore.authentication.jwtbearer to the resource server